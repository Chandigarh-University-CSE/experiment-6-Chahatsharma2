# MAXIMUM SUBARRAY
CODE:
import java.util.Scanner;
public class Solution 
{
    public int maxSubArray(int[] nums) 
{
        return helper(nums, 0, nums.length - 1);
    }
    private int helper(int[] nums, int left, int right) 
{
        if (left == right) 
{
            return nums[left];
        }
        int mid = (left + right) / 2;
        int leftSum = helper(nums, left, mid);
        int rightSum = helper(nums, mid + 1, right);
        int crossSum = crossSum(nums, left, mid, right);
        return Math.max(Math.max(leftSum, rightSum), crossSum);
    }
    private int crossSum(int[] nums, int left, int mid, int right) 
{
        int leftMax = Integer.MIN_VALUE;
        int rightMax = Integer.MIN_VALUE;
        int temp = 0;
        for (int i = mid; i >= left; i--) {

            temp += nums[i];
            leftMax = Math.max(leftMax, temp);
        }
        temp = 0;
        for (int i = mid + 1; i <= right; i++) 
{
            temp += nums[i];
            rightMax = Math.max(rightMax, temp);
        }
        return leftMax + rightMax;
    }
    public static void main(String[] args) 
{
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        int[] nums = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) 
{
            nums[i] = scanner.nextInt();
        }
        Solution solution = new Solution();
        int result = solution.maxSubArray(nums);
        System.out.println("Maximum Subarray Sum: " + result);
        scanner.close();
    }
}

# LONGEST INCREASING SUBSEQUENCE
CODE:
class Solution 
{
    public int lengthOfLIS(int[] nums) 
{
        List<Integer> sub = new ArrayList<>();
        for (int num : nums) {

            int idx = Collections.binarySearch(sub, num);
            if (idx < 0) idx = -idx - 1; 
            if (idx == sub.size()) 
{
                sub.add(num);
            } else 
{
                sub.set(idx, num);
            }
        }
        return sub.size();
    }
}

# PERFECT SQUARES
CODE:
import java.util.*;
class Solution 
{
    public int numSquares(int n) 
{
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i * i <= n; i++) 
{
            int square = i * i;
            for (int j = square; j <= n; j++) 
{
                dp[j] = Math.min(dp[j], dp[j - square] + 1);
            }
        }
        return dp[n];
    }
}
